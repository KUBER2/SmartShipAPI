openapi: 3.0.0
info:
  title: SmartShip data colection API
  version: '1.0.0'
  description: API for data collection.

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: localhost:1300
    description: Development server on local mashine

paths:
  /data/{shipId}:
    post:
      operationId: 'Acc new ship data'
      summary: Add new ship data
      description: Add new ship data for specific ship
      parameters: 
        - name: shipId
          in: path
          required: true
          description: Ship id
          schema: 
            type: string
      requestBody: 
        $ref: '#/components/requestBodies/shipDataRequest'
      responses:
        '200':
          $ref: '#/components/responses/shipDataResponse'
        '400':
          $ref: '#/components/responses/400Error'
components:
  securitySchemes:
    BaisicAuth:
      type: http
      scheme: basic
  schemas:
    Metadata:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          example: "admin@smartship.eu"
        modifiedAt:
          type: string
          format: date-time
        modifiedBy:
          type: string
          example: "user@smartship.eu"
    ShipData:
      type: object
    BridgeData:
      type: object
      properties: 
        windSpeed:
          type: integer
          format: int32
          minimum: 0
          example: 10
        GPSSpeed:
          type: integer
          format: int32
          minimum: 0
          example: 10
        
      


  requestBodies:
    shipDataRequest:
      required: true
      description: 'Ship data from IoT'
      content:           
          application/json:
            schema:
              properties:
                metadata:
                  $ref: '#/components/schemas/Metadata'
                data:
                  $ref: '#/components/schemas/ShipData'
  responses:
    shipDataResponse:
      description: 'Added new data'
      content:           
          application/json:
            schema:
              properties:
                id:
                  type: string
                metadata:
                  $ref: '#/components/schemas/Metadata'
                data:
                  $ref: '#/components/schemas/ShipData'
    400Error:
      description: Invalid request
      content:
        'application/json':
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Invalid request'    
        
    